#include <Servo.h>
#include <DHT.h>

// ================= PIN DEFINITIONS =================
// 🔥 Flame sensors
#define FLAME_R 30
#define FLAME_F 32
#define FLAME_L 31

// 🛞 Motors - L298N
#define enA 10
#define enB 9
#define in1 6
#define in2 5
#define in3 4
#define in4 3

// 💧 Water Pump
#define PUMP_PIN 26

// 🔁 Servo
#define SERVO_PIN A4
#define SERVO_CENTER 90

//Water level
#define WATER_LEVEL_PIN 28

// 📡 Ultrasonic
#define TRIG_PIN 8
#define ECHO_PIN 7
#define SAFE_DISTANCE 15  // cm

//Temp sensor
#define DHTPIN 27      // Pin where the DHT11 is connected
#define DHTTYPE DHT11  // Type of DHT sensor

// 💨 Motor Speed
#define MOTOR_SPEED 160

// 🕒 Spray Time
#define EXTINGUISH_TIME 4000

// ================ GLOBAL OBJECTS ===================
DHT dht(DHTPIN, DHTTYPE);
Servo fireServo;

// 🌡 Global temp & humidity
float temperature = 0.0;
float humidity = 0.0;

// ================= SETUP ===========================
void setup() {
  Serial.begin(9600);
  dht.begin();
  Serial.println("🚀 Fire Robot Booting...");

  // Motor pins
  pinMode(in1, OUTPUT); pinMode(in2, OUTPUT);
  pinMode(in3, OUTPUT); pinMode(in4, OUTPUT);
  pinMode(enA, OUTPUT); pinMode(enB, OUTPUT);

  // Flame sensors
  pinMode(FLAME_R, INPUT_PULLUP);
  pinMode(FLAME_F, INPUT_PULLUP);
  pinMode(FLAME_L, INPUT_PULLUP);

  // Pump & Servo
  pinMode(PUMP_PIN, OUTPUT);
  fireServo.attach(SERVO_PIN);
  fireServo.write(SERVO_CENTER);

  // Ultrasonic
  pinMode(TRIG_PIN, OUTPUT);
  pinMode(ECHO_PIN, INPUT);

  //Water level
  pinMode(WATER_LEVEL_PIN, INPUT_PULLUP);

  testActuators();
  Serial.println("✅ Fire Robot READY");
}

// ================= FIRE SENSOR ====================
bool isFireDetected() {
  return !digitalRead(FLAME_R) || !digitalRead(FLAME_F) || !digitalRead(FLAME_L);
}

// ================ ULTRASONIC ======================
long readDistanceCM() {
  digitalWrite(TRIG_PIN, LOW);
  delayMicroseconds(2);
  digitalWrite(TRIG_PIN, HIGH);
  delayMicroseconds(10);
  digitalWrite(TRIG_PIN, LOW);
  long duration = pulseIn(ECHO_PIN, HIGH);
  long distance = duration * 0.034 / 2;
  return distance;
}

// ================= MOVEMENT =======================
void forward() {
  digitalWrite(in1, HIGH); digitalWrite(in2, LOW);
  digitalWrite(in3, LOW);  digitalWrite(in4, HIGH);
  analogWrite(enA, MOTOR_SPEED);
  analogWrite(enB, MOTOR_SPEED);
}

void backward() {
  digitalWrite(in1, LOW); digitalWrite(in2, HIGH);
  digitalWrite(in3, HIGH); digitalWrite(in4, LOW);
  analogWrite(enA, MOTOR_SPEED);
  analogWrite(enB, MOTOR_SPEED);
}

void turnRight() {
  digitalWrite(in1, LOW);  digitalWrite(in2, HIGH);
  digitalWrite(in3, LOW);  digitalWrite(in4, HIGH);
  analogWrite(enA, MOTOR_SPEED);
  analogWrite(enB, MOTOR_SPEED);
}

void turnLeft() {
  digitalWrite(in1, HIGH); digitalWrite(in2, LOW);
  digitalWrite(in3, HIGH); digitalWrite(in4, LOW);
  analogWrite(enA, MOTOR_SPEED);
  analogWrite(enB, MOTOR_SPEED);
}

void stopMotors() {
  digitalWrite(in1, LOW); digitalWrite(in2, LOW);
  digitalWrite(in3, LOW); digitalWrite(in4, LOW);
}

// ================= EXTINGUISH FIRE =================
void extinguish(int direction) {
  // Check water level first
  if (digitalRead(WATER_LEVEL_PIN) == HIGH) {
    Serial.println("🚫 Water tank empty! Cannot spray.");
    return;
  }

  Serial.println("🔥 FIRE DETECTED - SPRAYING!");
  digitalWrite(PUMP_PIN, HIGH);  // Turn on pump

  if (direction == 0) {  // Front
    fireServo.write(60);
    delay(500);
    fireServo.write(120);
    delay(500);
  } else if (direction == 1) {  // Right
    fireServo.write(40);
    delay(1000);
  } else if (direction == -1) { // Left
    fireServo.write(140);
    delay(1000);
  }

  fireServo.write(SERVO_CENTER);
  delay(EXTINGUISH_TIME);
  digitalWrite(PUMP_PIN, LOW);  // Pump OFF

  Serial.println("✅ Fire Extinguished!");
}


// ================= RETREAT =======================
void retreat() {
  Serial.println("🚗 Retreating...");
  backward(); delay(800);
  turnRight(); delay(500);
  stopMotors();
}

// ================= SMART APPROACH =================
void approachFire() {
  Serial.println("👣 Approaching fire carefully...");
  long distance = readDistanceCM();

  while (distance > SAFE_DISTANCE && !digitalRead(FLAME_F)) {
    forward();
    delay(200);
    stopMotors();
    delay(100);
    distance = readDistanceCM();
    Serial.print("📏 Distance: "); Serial.print(distance); Serial.println(" cm");
  }

  stopMotors();
  Serial.println("📍 Stopped at safe distance.");
}

// ================ ACTUATOR TEST ===================
void testActuators() {
  Serial.println("🧪 Testing...");

  // Servo
  for (int i = 40; i <= 140; i += 20) {
    fireServo.write(i);
    delay(200);
  }
  fireServo.write(SERVO_CENTER);

  // Pump
  Serial.println("💧 Pump ON (1s)");
  digitalWrite(PUMP_PIN, HIGH);
  delay(1000);
  digitalWrite(PUMP_PIN, LOW);

  // Motors
  Serial.println("🛞 Motor Test");
  forward(); delay(400);
  backward(); delay(400);
  turnLeft(); delay(400);
  turnRight(); delay(400);
  stopMotors();

}

// ================= MAIN LOOP ======================
void loop() {
  bool rightFire = !digitalRead(FLAME_R);
  bool frontFire = !digitalRead(FLAME_F);
  bool leftFire = !digitalRead(FLAME_L);

  humidity = dht.readHumidity();
  temperature = dht.readTemperature(); // Celsius by default

  // Debug flame sensor status
  static unsigned long lastPrint = 0;
  if (millis() - lastPrint >= 1000) {
    Serial.print("🔥 Flame Status | L: ");
    Serial.print(leftFire ? "FIRE " : "✅ ");
    Serial.print("F: ");
    Serial.print(frontFire ? "FIRE " : "✅ ");
    Serial.print("R: ");
    Serial.println(rightFire ? "FIRE" : "✅");
    lastPrint = millis();

// Water Level Status
if (digitalRead(WATER_LEVEL_PIN) == LOW) {
  Serial.println("💧 Water Level: YES");
} else {
  Serial.println("🚫 Water Level: NO");
}

    //temp print
  Serial.print("Temperature: ");
  Serial.print(temperature);
  Serial.print(" °C\t");

  Serial.print("Humidity: ");
  Serial.print(humidity);
  Serial.println(" %");
  }

  if (frontFire) {
    approachFire();
    extinguish(0);
    retreat();
  } else if (rightFire) {
    turnRight(); delay(500); stopMotors();
    extinguish(1);
    retreat();
  } else if (leftFire) {
    turnLeft(); delay(500); stopMotors();
    extinguish(-1);
    retreat();
  }

  //temp
  if (isnan(humidity) || isnan(temperature)) {
    Serial.println("Failed to read from DHT sensor!");
    return;
  }

  delay(50);
}
